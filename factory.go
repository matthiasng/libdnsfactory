// Code generated by go run ./generate/main.go; DO NOT EDIT.

package libdnsfactory

import (
	"fmt"
    "github.com/libdns/cloudflare"
    "github.com/libdns/digitalocean"
    "github.com/libdns/dnspod"
    "github.com/libdns/gandi"
    "github.com/libdns/hetzner"
    "github.com/libdns/route53"
)

// NewProvider creates a new Provider
func NewProvider(name string, config map[string]string) (Provider, error) {
	switch name {
        case "cloudflare":
            var err error
            p := &cloudflare.Provider{}
            p.APIToken, err = getValueString("APIToken", false, config)
            if err != nil {
                return nil, fmt.Errorf("cloudflare [APIToken]: %w", err)
            }

            return p, nil
        case "digitalocean":
            var err error
            p := &digitalocean.Provider{}
            p.APIToken, err = getValueString("APIToken", true, config)
            if err != nil {
                return nil, fmt.Errorf("digitalocean [APIToken]: %w", err)
            }

            return p, nil
        case "dnspod":
            var err error
            p := &dnspod.Provider{}
            p.APIToken, err = getValueString("APIToken", true, config)
            if err != nil {
                return nil, fmt.Errorf("dnspod [APIToken]: %w", err)
            }

            return p, nil
        case "gandi":
            var err error
            p := &gandi.Provider{}
            p.APIToken, err = getValueString("APIToken", false, config)
            if err != nil {
                return nil, fmt.Errorf("gandi [APIToken]: %w", err)
            }

            return p, nil
        case "hetzner":
            var err error
            p := &hetzner.Provider{}
            p.AuthAPIToken, err = getValueString("AuthAPIToken", true, config)
            if err != nil {
                return nil, fmt.Errorf("hetzner [AuthAPIToken]: %w", err)
            }

            return p, nil
        case "route53":
            var err error
            p := &route53.Provider{}
            p.MaxRetries, err = getValueInt("MaxRetries", false, config)
            if err != nil {
                return nil, fmt.Errorf("route53 [MaxRetries]: %w", err)
            }

            return p, nil
	default:
		return nil, fmt.Errorf("Unknown provider: %s", name)
	}
}
